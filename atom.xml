<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Automatization]]></title>
  <link href="http://mdolinin.github.io/atom.xml" rel="self"/>
  <link href="http://mdolinin.github.io/"/>
  <updated>2014-01-18T15:24:25+02:00</updated>
  <id>http://mdolinin.github.io/</id>
  <author>
    <name><![CDATA[Mike Dolinin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thucydides+JBehave+Maven Run Tests in Parallel]]></title>
    <link href="http://mdolinin.github.io/blog/2014/01/17/thucydides-plus-jbehave-plus-maven-run-tests-in-parallel/"/>
    <updated>2014-01-17T05:31:04+02:00</updated>
    <id>http://mdolinin.github.io/blog/2014/01/17/thucydides-plus-jbehave-plus-maven-run-tests-in-parallel</id>
    <content type="html"><![CDATA[<p>Thucydides is very cool test automation framework, with good built-in support of Selenium/WebDriver, understandable java API, simple architecture. This project also has integration with common BDD frameworks as JBehave and EasyB. Integration with JBehave is done by thucydides-jbehave project <a href="https://github.com/thucydides-webtests/thucydides-jbehave">src</a>.</p>

<p>JBehave allows you to write, store and run your tests in plain text files with <em>.story</em> extension.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Scenario:</span><span class="nf"> trader is not alerted below threshold</span>
</span><span class='line'><span class="k"> </span>
</span><span class='line'><span class="k">Given </span><span class="nf">a stock of symbol STK</span><span class="s">1</span><span class="nf"> and a threshold of </span><span class="s">10.0</span><span class="nf"></span>
</span><span class='line'><span class="k">When </span><span class="nf">the stock is traded at </span><span class="s">5.0</span><span class="nf"></span>
</span><span class='line'><span class="k">Then </span><span class="nf">the alert status should be OFF</span>
</span><span class='line'><span class="nf"> </span>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> trader is alerted above threshold</span>
</span><span class='line'><span class="k"> </span>
</span><span class='line'><span class="k">Given </span><span class="nf">a stock of symbol STK</span><span class="s">1</span><span class="nf"> and a threshold of </span><span class="s">10.0</span><span class="nf"></span>
</span><span class='line'><span class="k">When </span><span class="nf">the stock is traded at </span><span class="s">11.0</span><span class="nf"></span>
</span><span class='line'><span class="k">Then </span><span class="nf">the alert status should be ON</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each story file is same as one test suite. That&rsquo;s why it should be atomic and without dependecies from other tests.</p>

<p>The main goal of testing is to provide feedback to developers team as fast as possible. The most powerfull solution to reduce time spent for tests is run them in parallel processes. Now if you use Thucydides and Jbehave frameworks together out of the box, you can&rsquo;t run tests in parallel mode.
But exists severall solutions for this issue.</p>

<p><strong>First</strong> is to divide automatically all stories on batches and then run them by some <em>build server</em>. <a href="http://wakaleo.com/index.php/blog/running-parallel-acceptance-tests-using-jbehave-thucydides-and-bamboo">Here</a> is a good article written by Simeon Ross, witch presents how to use this approach by using <a href="https://www.atlassian.com/software/bamboo">Bamboo</a>.</p>

<p><strong>Second</strong> is to use <a href="http://maven.apache.org/surefire/maven-failsafe-plugin/examples/fork-options-and-parallel-execution.html">Maven Failsafe plugin parallel test execution ability</a>. Maven failsafe plugin has ability to run tests using <em>forks</em> by setting the parameter <em>forkCount</em> to a value higher than 1. The parameter <em>forkCount</em> defines the maximum number of JVM processes that Failsafe will spawn concurrently to execute the tests. Below you can find an example of this approach.</p>

<p>First of all you should create JUnitStory test for each JBehave story. For example you have <em>use_calendar.story</em> file inside your <em>src/test/resources/stories</em> folder. That means you should create UseCalendar class in your <em>src/test/java</em> folder and extend it from ThucydidesJUnitStory class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mdolinin</span><span class="o">.</span><span class="na">acceptancetest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">net.thucydides.jbehave.ThucydidesJUnitStory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UseCalendar</span> <span class="kd">extends</span> <span class="n">ThucydidesJUnitStory</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then make changes in configuration of your pom.xml. You should define where to find your JUnitStory classes and how many forks to use. For example you want to run all your stories in parallel mode.</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>         <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-failsafe-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.16<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;systemPropertyVariables&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;webdriver.driver&gt;</span>${webdriver.driver}<span class="nt">&lt;/webdriver.driver&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/systemPropertyVariables&gt;</span>
</span><span class='line'>                <span class="nt">&lt;includes&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;include&gt;</span>**/acceptancetest/*.java<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/includes&gt;</span>
</span><span class='line'>                <span class="nt">&lt;forkMode&gt;</span>perthread<span class="nt">&lt;/forkMode&gt;</span>
</span><span class='line'>                <span class="nt">&lt;threadCount&gt;</span>4<span class="nt">&lt;/threadCount&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>integration-test<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>verify<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you run your tests using maven then every story will run in one of four forks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn integration-test
</span></code></pre></td></tr></table></div></figure>


<p>But it is boring to create new boilerplate class for each story file. That&rsquo;s why I created <em>maven-thucydides-jbehave-plugin</em> <a href="https://github.com/mdolinin/maven-thucydides-jbehave-plugin">src</a> for this job. To use it add to your pom.xml build section with goal <em>generate-sources</em> and define <em>project.junit.stories.package</em>(where to put generated stubs) in properties section. See example below:</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;webdriver.driver&gt;</span>firefox<span class="nt">&lt;/webdriver.driver&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.junit.stories.package&gt;</span>com.mdolinin.acceptancetest<span class="nt">&lt;/project.junit.stories.package&gt;</span>
</span><span class='line'><span class="nt">&lt;/properties&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>         <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>net.thucydides.maven.plugin<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-thucydides-jbehave-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>0.9.223-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>generate-sources<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this will be usefull for someone.</p>
]]></content>
  </entry>
  
</feed>
