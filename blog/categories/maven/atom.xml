<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | Automatization]]></title>
  <link href="http://mdolinin.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://mdolinin.github.io/"/>
  <updated>2014-07-07T17:48:26+03:00</updated>
  <id>http://mdolinin.github.io/</id>
  <author>
    <name><![CDATA[Mike Dolinin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thucydides+JBehave+Maven Generate New Steps From Scenarios]]></title>
    <link href="http://mdolinin.github.io/blog/2014/07/07/thucydides-plus-jbehave-plus-maven-generate-new-steps-from-scenarios/"/>
    <updated>2014-07-07T10:30:39+03:00</updated>
    <id>http://mdolinin.github.io/blog/2014/07/07/thucydides-plus-jbehave-plus-maven-generate-new-steps-from-scenarios</id>
    <content type="html"><![CDATA[<p>If you are using Jbehave framework, you know that it has very simple structure of <em>.story</em> file content.
Which consists of steps &ndash; Given,When,Then. And only steps are required part of the story. But this framework provides us to add meta-information to our tests for better understanding. One of the way to do this is use <em>Scenario:</em> sections.
``` gherkin
Scenario: log in as autorized user</p>

<p>Given user on authorization page
When he logs in as John with password 123
Then opens user&rsquo;s page
```
It is very useful feature, which divide story into sections and makes it more readable/understandable.
But you can use <em>Scenario</em> to create your own steps library automatically.</p>

<!-- more -->


<p>To do this you need <em>maven-thucydides-jbehave-plugin</em> <a href="https://github.com/mdolinin/maven-thucydides-jbehave-plugin">src</a>. Add it to your pom.xml build section with goal <em>generate-steps</em>. See example below:
```xml pom.xml</p>

<pre><code>         &lt;plugin&gt;
            &lt;groupId&gt;net.thucydides.maven.plugin&lt;/groupId&gt;
            &lt;artifactId&gt;maven-thucydides-jbehave-plugin&lt;/artifactId&gt;
            &lt;version&gt;0.9.223&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;generate-steps&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
</code></pre>

<p>```
This plugin starts working on phase <em>process-test-classes</em> (by default).</p>

<p>And as result will <em>generate new <strong>When</strong> steps for each <strong>Scenario</strong> section</em>.</p>

<p>Let&rsquo;s see his work on example. If you have APassingBehavior.story file with scenario shown above inside,
then plugin execution create class with two new steps.
```java APassingBehaviorSteps.java
package net.thucydides.maven.plugin.test;</p>

<p>import net.thucydides.maven.plugin.test.LoginSteps;
import java.lang.String;
import net.thucydides.core.annotations.Steps;
import net.thucydides.core.pages.Pages;
import net.thucydides.core.steps.ScenarioSteps;
import org.jbehave.core.annotations.When;</p>

<p>public class APassingBehaviorSteps extends ScenarioSteps {</p>

<pre><code>private static final long serialVersionUID = 1L;

@Steps
private LoginSteps loginSteps;

public APassingBehaviorSteps(Pages pages) {
    super(pages);
}

@When("log in as autorized user $login $pass")
public void logInAsAutorizedUser(String login, String pass) {
    loginSteps.givenUserOnAuthorizationPage();
    loginSteps.whenHeLogsInWithPassword(login, pass);
    loginSteps.thenOpensUsersPage();
}

@When("log in as autorized user")
public void logInAsAutorizedUser() {
    loginSteps.givenUserOnAuthorizationPage();
    loginSteps.whenHeLogsInWithPassword("John", "123");
    loginSteps.thenOpensUsersPage();
}
</code></pre>

<p>}
```
In result:</p>

<ul>
<li>steps will have name as scenario title</li>
<li>first step will require to enter all parameters from inside steps explicitly</li>
<li>second step will use parameters from scenario</li>
<li>you can rewrite scenario to one step
<code>gherkin
When log in as autorized user
</code></li>
<li>or
<code>gherkin
When log in as autorized user John 123
</code></li>
</ul>


<p>Also you can create <em>parameterized Scenario Steps</em> using &lsquo;$&rsquo; sign, like in Jbehave.
Add parameters from any inside step to scenario title.
``` gherkin
Scenario: log in as $login user</p>

<p>Given user on authorization page
When he logs in as John with password 123
Then opens user&rsquo;s page
<code>
And rerun plugin.
</code>java APassingBehaviorSteps.java
package net.thucydides.maven.plugin.test;</p>

<p>import net.thucydides.maven.plugin.test.LoginSteps;
import java.lang.String;
import net.thucydides.core.annotations.Steps;
import net.thucydides.core.pages.Pages;
import net.thucydides.core.steps.ScenarioSteps;
import org.jbehave.core.annotations.When;</p>

<p>public class APassingBehaviorSteps extends ScenarioSteps {</p>

<pre><code>private static final long serialVersionUID = 1L;

@Steps
private LoginSteps loginSteps;

public APassingBehaviorSteps(Pages pages) {
    super(pages);
}

@When("log in as $login $pass")
public void logInAslogin(String login, String pass) {
    loginSteps.givenUserOnAuthorizationPage();
    loginSteps.whenHeLogsInWithPassword(login, pass);
    loginSteps.thenOpensUsersPage();
}

@When("log in as $login")
public void logInAslogin(String login) {
    loginSteps.givenUserOnAuthorizationPage();
    loginSteps.whenHeLogsInWithPassword(login, "123");
    loginSteps.thenOpensUsersPage();
}
</code></pre>

<p>}
<code>
So now you can use your login step.
</code> gherkin
When log in as John
```</p>

<p>I hope this will be usefull for someone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thucydides+JBehave+Maven Run Tests in Fixed Order]]></title>
    <link href="http://mdolinin.github.io/blog/2014/01/19/thucydides-plus-jbehave-plus-maven-run-tests-in-fixed-order/"/>
    <updated>2014-01-19T13:59:07+02:00</updated>
    <id>http://mdolinin.github.io/blog/2014/01/19/thucydides-plus-jbehave-plus-maven-run-tests-in-fixed-order</id>
    <content type="html"><![CDATA[<p>In my previous <a href="/blog/2014/01/17/thucydides-plus-jbehave-plus-maven-run-tests-in-parallel">post</a>, I discribed how to run tests in parallel mode using Thucycdides,Jbehave and Maven Failsafe Plugin. But sometimes you need to run tests in fixed order, for example when you:</p>

<ul>
<li>make some preconditions</li>
<li>clear data</li>
<li>import new configuration</li>
<li>test applications when some services are shutdown</li>
<li>etc.</li>
</ul>


<!-- more -->


<p>Maven failsafe plugin has ability to add different executions in fixed order.
This feature can be used by adding <em>executions</em> sections into failsafe configuration, for each test suite. They will run in the same order as discribed in pom.xml file.</p>

<p>For example you have several <em>*.story</em> files and one of them named Preconditions.story. And you know that according to business logic of your application all stories except Preconditions can be run in parallel order. But Preconditions.story should be executed before others. Then you can use configuration that shown below.
``` xml pom.xml</p>

<pre><code>    &lt;plugin&gt;
        &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.16&lt;/version&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;id&gt;preconditions&lt;/id&gt;
                &lt;goals&gt;
                    &lt;goal&gt;integration-test&lt;/goal&gt;
                &lt;/goals&gt;
                &lt;configuration&gt;
                    &lt;systemPropertyVariables&gt;
                        &lt;webdriver.driver&gt;${webdriver.driver}&lt;/webdriver.driver&gt;
                    &lt;/systemPropertyVariables&gt;
                    &lt;includes&gt;
                       &lt;include&gt;**/acceptancetest/Preconditions.java&lt;/include&gt;
                    &lt;/includes&gt;
                    &lt;summaryFile&gt;target/failsafe-reports/failsafe-summary-preconditions.xml&lt;/summaryFile&gt;
                &lt;/configuration&gt;
            &lt;/execution&gt;
            &lt;execution&gt;
               &lt;id&gt;acceptance-test-parallel-execution&lt;/id&gt;
               &lt;goals&gt;
                   &lt;goal&gt;integration-test&lt;/goal&gt;
               &lt;/goals&gt;
               &lt;configuration&gt;
                   &lt;systemPropertyVariables&gt;
                       &lt;webdriver.driver&gt;${webdriver.driver}&lt;/webdriver.driver&gt;
                   &lt;/systemPropertyVariables&gt;
                   &lt;includes&gt;
                       &lt;include&gt;**/acceptancetest/*.java&lt;/include&gt;
                   &lt;/includes&gt;
                   &lt;excludes&gt;
                       &lt;exclude&gt;**/acceptancetest/Preconditions.java&lt;/exclude&gt;
                   &lt;/excludes&gt;
                   &lt;forkCount&gt;4&lt;/forkCount&gt;
                   &lt;reuseForks&gt;true&lt;/reuseForks&gt;
                   &lt;summaryFile&gt;target/failsafe-reports/failsafe-summary-acceptance-test-parallel-execution.xml&lt;/summaryFile&gt;
               &lt;/configuration&gt;
           &lt;/execution&gt;
           &lt;execution&gt;
               &lt;id&gt;verify&lt;/id&gt;
               &lt;goals&gt;
                   &lt;goal&gt;verify&lt;/goal&gt;
               &lt;/goals&gt;
               &lt;configuration&gt;
                   &lt;summaryFiles&gt;
                       &lt;summaryFile&gt;target/failsafe-reports/failsafe-summary-acceptance-test-preconditions.xml&lt;/summaryFile&gt;
                       &lt;summaryFile&gt;target/failsafe-reports/failsafe-summary-acceptance-test-parallel-execution.xml&lt;/summaryFile&gt;
                   &lt;/summaryFiles&gt;
               &lt;/configuration&gt;
           &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
</code></pre>

<p>```
You can create <em>execution</em> sections as many as you want but this is bad practice, because your tests become dependent and execution time will rise. That&rsquo;s why I suggest to launch most of the tests in one run with parallel mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thucydides+JBehave+Maven Run Tests in Parallel]]></title>
    <link href="http://mdolinin.github.io/blog/2014/01/17/thucydides-plus-jbehave-plus-maven-run-tests-in-parallel/"/>
    <updated>2014-01-17T05:31:04+02:00</updated>
    <id>http://mdolinin.github.io/blog/2014/01/17/thucydides-plus-jbehave-plus-maven-run-tests-in-parallel</id>
    <content type="html"><![CDATA[<p>Thucydides is very cool test automation framework, with good built-in support of Selenium/WebDriver, understandable java API, simple architecture. This project also has integration with common BDD frameworks as JBehave and EasyB. Integration with JBehave is done by thucydides-jbehave project <a href="https://github.com/thucydides-webtests/thucydides-jbehave">src</a>.</p>

<p>JBehave allows you to write, store and run your tests in plain text files with <em>.story</em> extension.
``` gherkin
Scenario: trader is not alerted below threshold</p>

<p>Given a stock of symbol STK1 and a threshold of 10.0
When the stock is traded at 5.0
Then the alert status should be OFF</p>

<p>Scenario: trader is alerted above threshold</p>

<p>Given a stock of symbol STK1 and a threshold of 10.0
When the stock is traded at 11.0
Then the alert status should be ON
```
Each story file is same as one test suite. That&rsquo;s why it should be atomic and without dependecies from other tests.</p>

<p>The main goal of testing is to provide feedback to developers team as fast as possible. The most powerfull solution to reduce time spent for tests is run them in parallel processes. Now if you use Thucydides and Jbehave frameworks together out of the box, you can&rsquo;t run tests in parallel mode.
But exists severall solutions for this issue.</p>

<!-- more -->


<p><strong>First</strong> is to divide automatically all stories on batches and then run them by some <em>build server</em>. <a href="http://wakaleo.com/index.php/blog/running-parallel-acceptance-tests-using-jbehave-thucydides-and-bamboo">Here</a> is a good article written by Simeon Ross, which presents how to use this approach by using <a href="https://www.atlassian.com/software/bamboo">Bamboo</a>.</p>

<p><strong>Second</strong> is to use <a href="http://maven.apache.org/surefire/maven-failsafe-plugin/examples/fork-options-and-parallel-execution.html">Maven Failsafe plugin parallel test execution ability</a>. Maven failsafe plugin has ability to run tests using <em>forks</em> by setting the parameter <em>forkCount</em> to a value higher than 1. The parameter <em>forkCount</em> defines the maximum number of JVM processes that Failsafe will spawn concurrently to execute the tests. Below you can find an example of this approach.</p>

<p>First of all you should create JUnitStory test for each JBehave story. For example you have <em>use_calendar.story</em> file inside your <em>src/test/resources/stories</em> folder. That means you should create UseCalendar class in your <em>src/test/java</em> folder and extend it from ThucydidesJUnitStory class. Class name should be same as story name and match to java syntax (use &ldquo;CamelCase&rdquo; without spaces).
``` java
package com.mdolinin.acceptancetest;</p>

<p>import net.thucydides.jbehave.ThucydidesJUnitStory;</p>

<p>public class UseCalendar extends ThucydidesJUnitStory {}
<code>
Then make changes in configuration of your pom.xml. You should define where to find your JUnitStory classes and how many forks to use. For example you want to run all your stories in parallel mode.
</code> xml pom.xml</p>

<pre><code>         &lt;plugin&gt;
            &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.16&lt;/version&gt;
            &lt;configuration&gt;
                &lt;systemPropertyVariables&gt;
                    &lt;webdriver.driver&gt;${webdriver.driver}&lt;/webdriver.driver&gt;
                &lt;/systemPropertyVariables&gt;
                &lt;includes&gt;
                    &lt;include&gt;**/acceptancetest/*.java&lt;/include&gt;
                &lt;/includes&gt;
                &lt;forkMode&gt;perthread&lt;/forkMode&gt;
                &lt;threadCount&gt;4&lt;/threadCount&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;integration-test&lt;/goal&gt;
                        &lt;goal&gt;verify&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
</code></pre>

<p><code>
Now if you run your tests using maven then every story will run in one of four forks.
</code> bash
$ mvn integration-test
<code>
But it is boring to create new boilerplate class for each story file. That's why I created *maven-thucydides-jbehave-plugin* [src](https://github.com/mdolinin/maven-thucydides-jbehave-plugin) for this job. To use it add to your pom.xml build section with goal *generate-sources* and define *project.junit.stories.package*(where to put generated stubs) in properties section. See example below:
</code>xml pom.xml</p>

<pre><code>&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
    &lt;webdriver.driver&gt;firefox&lt;/webdriver.driver&gt;
    &lt;project.junit.stories.package&gt;com.mdolinin.acceptancetest&lt;/project.junit.stories.package&gt;
&lt;/properties&gt;
</code></pre>

<p><code>
</code>xml pom.xml</p>

<pre><code>         &lt;plugin&gt;
            &lt;groupId&gt;net.thucydides.maven.plugin&lt;/groupId&gt;
            &lt;artifactId&gt;maven-thucydides-jbehave-plugin&lt;/artifactId&gt;
            &lt;version&gt;0.9.223-SNAPSHOT&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;generate-sources&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
</code></pre>

<p>```
I hope this will be usefull for someone.</p>
]]></content>
  </entry>
  
</feed>
